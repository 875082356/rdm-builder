# http://docs.redisdesktop.com/en/latest/install/
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md

# This is a basic workflow to help you get started with Actions
name: CI for redis desktop manager

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ debug ]
    paths-ignore: 
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [ debug ]
    paths-ignore: 
      - 'README.md'
      - 'LICENSE'

env:
  RDM_REF: 2020.1
  VERSION: 2020.1.0
  PYTHON_EMBEDDED_VERSION: 3.7.8

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create_release:
    runs-on: windows-latest
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjobs_idoutputs
    # Map a step output to a job output
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # - name: checkout
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RDM_REF }}-debug
          release_name: v${{ env.RDM_REF }}-debug
          body: |
            ${{ env.RDM_REF }}-debug
          draft: true
          prerelease: true

  build_on_windows:
    needs: create_release
    strategy:
      matrix:
        #configuration: [Debug, Release]
        configuration: [Release]
        qt_target: [Desktop]
        qt_arch: [win64_msvc2017_64]
        # 额外设置msvc_arch
        include:
          - qt_arch: win64_msvc2017_64
            msvc_arch: x64

    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2.2.0
      with:
        repository: uglide/RedisDesktopManager
        path: rdm
        submodules: 'recursive'
#         ref: ${{ env.RDM_REF }}
        ref: 2020

    # install QT   
    - name: install QT
      uses: jurplel/install-qt-action@v2.7.2
      with: 
        version: '5.13.2'
        modules: 'qtcharts'

    - name : fix compilation
      run: |
        cd rdm/3rdparty/qredisclient/3rdparty/hiredis
        git apply ../hiredis-win.patch

    - name: install zlib
      run: |
        cd rdm/3rdparty
        nuget install zlib-msvc14-x64 -Version 1.2.11.7795

#    # install python3  
#    - name: install Python3
#      uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

    # install python3
    - name: install python37
      shell: cmd
      run: mklink /d C:\Python37-x64 C:\hostedtoolcache\windows\python\3.7.8\x64

    # pip install
    - name: pip install
      shell: cmd
      run: |
        cd rdm\build\windows\installer\resources
        xcopy %GITHUB_WORKSPACE%\rdm\src\py . /s /i
        pip3 install -t . -r requirements.txt
        python -m compileall -b .
        del /s /q *.py

    # Runs a single command using the runners shell
    - name: build
      shell: cmd
      env:
        vc_arch: ${{ matrix.msvc_arch }}
      run: |
        python rdm\build\utils\set_version.py ${{ env.VERSION }} > rdm\src\version.h
        cd rdm\src
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
        qmake rdm.pro
        nmake

    # 缺少python37.dll
    - name: add python37.dll
      shell: powershell
#      env:
#        PYTHON_EMBEDDED_VERSION: ${{ env.PYTHON_EMBEDDED_VERSION }}
      run: |
        cd rdm\build\windows\installer\resources
        wget "https://www.python.org/ftp/python/${{ env.PYTHON_EMBEDDED_VERSION }}/python-${{ env.PYTHON_EMBEDDED_VERSION }}-embed-amd64.zip" -outfile "python-embed.zip"
        7z.exe x python-embed.zip python37.zip python3.dll python37.dll
        del python-embed.zip

    # windeployqt.exe --force --qmldir ${{ env.QML2_IMPORT_PATH }} rdm.exe
    - name: package
      id: pacage
      shell: cmd
      run: |
        cd rdm
        copy /y bin\windows\release\rdm.exe build\windows\installer\resources\rdm.exe
        copy /y bin\windows\release\rdm.exp build\windows\installer\resources\rdm.exp
        copy /y bin\windows\release\rdm.lib build\windows\installer\resources\rdm.lib
        cd build\windows\installer\resources
        windeployqt.exe --release --force --qmldir ../../../../src/qml rdm.exe
        makensis.exe /V1 /DVERSION=${{ env.VERSION }} ../installer.nsi

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: rdm/build/windows/installer/redis-desktop-manager-${{ env.VERSION }}.exe
        asset_name: redis-desktop-manager-${{ env.VERSION }}.exe
        asset_content_type: application/vnd.microsoft.portable-executable

  build_on_osx:
    needs: create_release
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2.2.0
      with:
        repository: uglide/RedisDesktopManager
        path: rdm
        submodules: 'recursive'
#         ref: ${{ env.RDM_REF }}
        ref: 2020

    # install QT   
    - name: install QT
      uses: jurplel/install-qt-action@v2.7.2
      with: 
        version: '5.13.2'
        modules: 'qtcharts'
    
    - name: copy info.plist
      run: |
        cd rdm
        cd ./src && cp ./resources/Info.plist.sample ./resources/Info.plist
    
    # 使用私有库,egg-links时-t不能同时使用，--user解决权限问题
    # https://github.com/UnitedIncome/serverless-python-requirements/issues/240
    # https://github.com/pypa/pip/issues/4390
    # https://github.com/pypa/pip/issues/4139
    # https://github.com/pypa/pip/issues/562
    # sudo pip3 install --prefix . -r $GITHUB_WORKSPACE/rdm/src/py/requirements.txt
    - name: pip install
      run: |
        cd rdm
        mkdir -p bin/osx/release && cd bin/osx/release
        cp -Rf $GITHUB_WORKSPACE/rdm/src/py/ .
        sudo pip3 install -t . -r $GITHUB_WORKSPACE/rdm/src/py/requirements.txt
        python -m compileall -b .
        find . -name "*.py"  | xargs rm -rf
        find . -name "__pycache__"  | xargs rm -rf
        brew install tree && tree -a

    # brew install tree && tree -a
    # 去掉initUpdater不然报Please download new version of Redis Desktop Manager，不能使用
    # sed -i '.back' 's/initUpdater();/\/\/initUpdater();/g' ./app/app.cpp
    - name: build and package
      id: build_and_package
      run: |
        python ./rdm/build/utils/set_version.py ${{ env.VERSION }} > ./rdm/src/version.h
        cd rdm/src
        qmake rdm.pro CONFIG-=debug
        make -s -j 8
        cd ../bin/osx/release
        macdeployqt ./Redis\ Desktop\ Manager.app -qmldir=../../../src/qml -dmg
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: rdm/bin/osx/release/Redis Desktop Manager.dmg
        asset_name: 'Redis Desktop Manager.dmg'
        asset_content_type: application/dmg
